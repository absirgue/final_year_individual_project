import unittest
from analysis.data_configuration import DataConfiguration

class TestDataConfiguration(unittest.TestCase):

    def test_default_config_for_ratios_is_as_expected(self):
        config = DataConfiguration()
        config.set_to_default_configuration("RATIOS")
        self.assertTrue("RATIO" in config.data_types)
        self.assertFalse("RAW NUMBER" in config.data_types)
        self.assertTrue(config.encode_industry_outlooks)
        self.assertEqual(config.outlooks_weight_distribution, {'buy':2,'high':1,'highest':2,'hold':0,'low':-1,'lowest':-2,'neutral':0})
        self.assertTrue(config.encode_country_risk_score)
        self.assertTrue(config.encode_industry_name)
        self.assertTrue(config.encode_geography_diversification)
        self.assertEqual(config.geography_encoding_type,0)
        self.assertTrue(config.encode_business_diversification)
        self.assertEqual(config.business_encoding_type,0)
        
    def test_default_config_for_raw_nbs_is_as_expected(self):
        config = DataConfiguration()
        config.set_to_default_configuration("RAW NUMBERS")
        self.assertFalse("RATIO" in config.data_types)
        self.assertTrue("RAW NUMBER" in config.data_types)
        self.assertTrue(config.encode_industry_outlooks)
        self.assertEqual(config.outlooks_weight_distribution, {'buy':2,'high':1,'highest':2,'hold':0,'low':-1,'lowest':-2,'neutral':0})
        self.assertTrue(config.encode_country_risk_score)
        self.assertTrue(config.encode_industry_name)
        self.assertTrue(config.encode_geography_diversification)
        self.assertEqual(config.geography_encoding_type,0)
        self.assertTrue(config.encode_business_diversification)
        self.assertEqual(config.business_encoding_type,0)
    
    def test_default_config_for_ratios_and_textual_is_as_expected(self):
        config = DataConfiguration()
        config.set_to_default_configuration("RATIOS",True)
        self.assertTrue("RATIO" in config.data_types)
        self.assertFalse("RAW NUMBER" in config.data_types)
        self.assertTrue("INDUSTRY NAMES" in config.data_types)
        self.assertTrue("DIVERSIFICATION - GEOGRAPHY - REVENUE" in config.data_types)
        self.assertTrue("DIVERSIFICATION - BUSINESS SEGMENTS - REVENUE" in config.data_types)
        self.assertTrue("DIVERSIFICATION - BUSINESS SEGMENTS - REVENUE" in config.data_types)
        self.assertTrue(config.encode_industry_outlooks)
        self.assertEqual(config.outlooks_weight_distribution, {'buy':2,'high':1,'highest':2,'hold':0,'low':-1,'lowest':-2,'neutral':0})
        self.assertFalse(config.encode_country_risk_score)
        self.assertFalse(config.encode_industry_name)
        self.assertFalse(config.encode_geography_diversification)
        self.assertFalse(config.encode_business_diversification)
    
    def test_default_config_for_raw_nbs_and_textual_is_as_expected(self):
        config = DataConfiguration()
        config.set_to_default_configuration("RAW NUMBERS",True)
        self.assertFalse("RATIO" in config.data_types)
        self.assertTrue("RAW NUMBER" in config.data_types)
        self.assertTrue("INDUSTRY NAMES" in config.data_types)
        self.assertTrue("DIVERSIFICATION - GEOGRAPHY - REVENUE" in config.data_types)
        self.assertTrue("DIVERSIFICATION - BUSINESS SEGMENTS - REVENUE" in config.data_types)
        self.assertTrue("DIVERSIFICATION - BUSINESS SEGMENTS - REVENUE" in config.data_types)
        self.assertTrue(config.encode_industry_outlooks)
        self.assertEqual(config.outlooks_weight_distribution, {'buy':2,'high':1,'highest':2,'hold':0,'low':-1,'lowest':-2,'neutral':0})
        self.assertFalse(config.encode_country_risk_score)
        self.assertFalse(config.encode_industry_name)
        self.assertFalse(config.encode_geography_diversification)
        self.assertFalse(config.encode_business_diversification)
    
    def test_default_config_for_both_is_as_expected(self):
        config = DataConfiguration()
        config.set_to_default_configuration("BOTH")
        self.assertTrue("RATIO" in config.data_types)
        self.assertTrue("RAW NUMBER" in config.data_types)
        self.assertTrue(config.encode_industry_outlooks)
        self.assertEqual(config.outlooks_weight_distribution, {'buy':2,'high':1,'highest':2,'hold':0,'low':-1,'lowest':-2,'neutral':0})
        self.assertTrue(config.encode_country_risk_score)
        self.assertTrue(config.encode_industry_name)
        self.assertTrue(config.encode_geography_diversification)
        self.assertEqual(config.geography_encoding_type,0)
        self.assertTrue(config.encode_business_diversification)
        self.assertEqual(config.business_encoding_type,0)
    
    def test_default_config_for_both_and_textual_is_as_expected(self):
        config = DataConfiguration()
        config.set_to_default_configuration("BOTH",True)
        self.assertTrue("RATIO" in config.data_types)
        self.assertTrue("RAW NUMBER" in config.data_types)
        self.assertTrue("INDUSTRY NAMES" in config.data_types)
        self.assertTrue("DIVERSIFICATION - GEOGRAPHY - REVENUE" in config.data_types)
        self.assertTrue("DIVERSIFICATION - BUSINESS SEGMENTS - REVENUE" in config.data_types)
        self.assertTrue("DIVERSIFICATION - BUSINESS SEGMENTS - REVENUE" in config.data_types)
        self.assertTrue(config.encode_industry_outlooks)
        self.assertEqual(config.outlooks_weight_distribution, {'buy':2,'high':1,'highest':2,'hold':0,'low':-1,'lowest':-2,'neutral':0})
        self.assertFalse(config.encode_country_risk_score)
        self.assertFalse(config.encode_industry_name)
        self.assertFalse(config.encode_geography_diversification)
        self.assertFalse(config.encode_business_diversification)